clear
Q = [0.1, 0; 0, 0.1]; % 过程误差协方差矩阵，Q矩阵
R = [1, 0; 0, 1]; % 测量误差协方差矩阵，R矩阵
A = [1, 1; 0, 1]; % 状态转移矩阵，A矩阵
H = [1, 0; 0, 1]; % 观测矩阵，H矩阵
I = [1, 0; 0, 1]; % 单位矩阵

epoch = 30; % 计算步数（数据量30）
P = [1, 0; 0, 1]; % 估计误差协方差矩阵

X = ones(epoch, 2); % X用来保存实际位置和速度（数据量30）
X(1, :) = [0, 1]; % 实际位置和速度初始化

Xa = ones(epoch, 2); % 后验估计
Xa(1, :) = [0, 1]; % 后验估计值初始化

Xa_ = ones(epoch, 2); % 先验估计
Xa_(1, :) = (A * Xa(1, :)')'; % 先验估计值初始化

Z = ones(epoch, 2); % 测量的位置和速度

for k = 2:epoch
    % 过程误差生成，符合正态分布P(w)～（0，Q）
    w1 = normrnd(0, sqrt(Q(1, 1))); % 位置过程误差
    w2 = normrnd(0, sqrt(Q(2, 2))); % 速度过程误差
    W = [w1, w2];
    X(k, :) = (A * X(k-1, :)' + W')'; % 更新实际位置、实际速度
end

for k = 1:epoch
    % 测量误差生成，符合正态分布P(v)～（0，R）
    v1 = normrnd(0, sqrt(R(1, 1))); % 位置观测误差
    v2 = normrnd(0, sqrt(R(2, 2))); % 速度观测误差
    V = [v1, v2];
    Z(k, :) = (H * X(k, :)' + V')'; %更新测量位置、测量速度
end
for k = 2:epoch
    %预测
    P_ = A * P * A' + Q;
    Xa_(k, :) = (A * Xa(k-1, :)')'; % 先验
    %校正
    K = P_ * H' * inv((H * P_)*H'+R);
    P = (I - K * H) * P_;
    Xa(k, :) = (Xa_(k, :)' + K * (Z(k, :)' - H * Xa_(k, :)'))';
end
plot(1:epoch, X(:, 2), 'r*-', 1:epoch, Z(:, 2), '-b*', 1:epoch, Xa_(:, 2), '-g*', 1:epoch, Xa(:, 2), '-k*')
hold on
legend('实际速度', '测量速度', '先验估计速度', '后验估计速度')